% [Bcoeffs, BcoeffsSD] = CALCBETAS(FCpoint, WingData) finds% the regression beta weights for calculating the fingertip position,% FCpoint, given 3D marker data in WingData. Uses all combination of marker% triplets.%% Input:  FCpoint   1x3 probe coefficents%         WingData  NxM wing sensor coords%                       N samples and M = 3 (xyz) * number of markers%% Output: Bcoeffs   1x3 Beta coefficents that can be used to%                       estimate fingertip position from%                       sensor coordinates.%       % L. Maloney        8/2003% E. Gaffin-Cahn    2/2019function [Bcoeffs, BcoeffsSD] = CalcBetas(FCpoint, WingData)    nSamples     = size(WingData,1);nMarkers     = size(WingData,2)/3;MarkerData   = mat2cell(WingData, nSamples, 3*ones([1,nMarkers])); % each cell is one markercombinations = nchoosek(1:nMarkers,3);Bcoeffs   = cell(size(combinations,1),1);BcoeffsSD = cell(size(combinations,1),1);fprintf('Calibration prediction SDs (mm). Should be less than 1.0.\n\n');for i = 1:size(combinations,1)    [Bcoeffs{i}, BcoeffsSD{i}]= CalcBeta(MarkerData(combinations(i,:)), FCpoint);    fprintf('SDx%7.3f\tSDy\t%7.3f\tSDz%7.3f\n',BcoeffsSD{i}(1),BcoeffsSD{i}(2),BcoeffsSD{i}(3));endfunction [B, sd] = CalcBeta(C, FCpoint)N  = size(C{1},1);% marker position np1 = C{3};C{1};p2 = C{2};p3 = C{1};C{3};p4 = repmat(FCpoint, [N 1]); % goal, where finger was touching during calibration% get vectors to make coordinate systemv1to2  = p1-p2;%p2 - p1;v1to3  = p3-p2;%p3 - p1;vCross = cross(v1to2, v1to3);v1to4  = p4-p2;%p4 - p1;% Now we reshape them to be 3*Nx1 vectors. Stack x on y on z coordinates.XP = [v1to2(:), vCross(:), v1to3(:)];%[v1to2(:), v1to3(:), vCross(:)]; % size 3*N x 3B   = LMregress(v1to4(:), XP); % Solve v4vvec = XP * B% reconstructv1to4_est = v1to2*B(1) + vCross*B(2) + v1to3*B(3);residuals = v1to4 - v1to4_est;sd        = std(residuals, [], 1); % SD of residuals pf prediction in X,Y,Zfunction [b,r,VAF] = LMregress(y,X)%REGRESS Multiple linear regression using least squares.%   b = REGRESS(y,X) returns the vector of regression coefficients, b,%   in the linear model  y = Xb, (X is an nxp matrix, y is the nx1%   vector of observations).% Find the least squares solution.[Q, R]=qr(X,0);b = R\(Q'*y);r = y - X*b;VAF = 1 - ( norm(r) / norm(y) ) .^ 2;